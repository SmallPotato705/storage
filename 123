import tkinter as tk
from tkinter import PhotoImage, messagebox
import csv
import os
import requests
from PIL import Image, ImageTk
from io import BytesIO
from paddleocr import PaddleOCR
from pyzbar.pyzbar import decode
from pyzbar.pyzbar import ZBarSymbol
import threading
import time
import serial
from datetime import datetime
from tkinter import ttk
from bs4 import BeautifulSoup


# =============================================================================
# 3.3V                  |  5V
#                       |  5V
#                       |  GND
# =============================================================================
                      
# =============================================================================
# GPIO 6  - Port01 Arm  |  GPIO 12   
# GPIO 13 - Port02 Arm  |  GPIO GND
# GPIO 19 - Port03 Arm  |  GPIO 16  - Port01 CST
# GPIO 26 - USC         |  GPIO 20  - Port02 CST
# GND                   |  GPIO 21  - Port03 CST   
# =============================================================================

# =============================================================================
# 
# =============================================================================
THRESHOLD = 2
DELAYTIME = 1
timeInterval = 120
OA_TEST = False

SERIAL_PORT = "COM4"
# =============================================================================
#  URL
# =============================================================================
if OA_TEST == True:
    urlVideo = ["http://172.20.10.2:8000/Video0", "http://172.20.10.2:8000/Video2", "http://172.20.10.2:8000/Video4", "http://172.20.10.2:8000/Arm"]
    urlGpioCST = ["http://172.20.10.2:8000/gpio21", "http://172.20.10.2:8000/gpio20", "http://172.20.10.2:8000/gpio16", "http://172.20.10.2:8000/gpio12"]
    
    urlGpioArmStatus = ["http://172.20.10.2:8000/gpio06", "http://172.20.10.2:8000/gpio13", "http://172.20.10.2:8000/gpio19", "http://172.20.10.2:8000/gpio26"]
    urlGpioArmSignal = ["http://172.20.10.2:8000/gpio23", "http://172.20.10.2:8000/gpio24"]
    
else:
    urlVideo = ["http://192.168.68.121:8000/Video0", "http://192.168.68.121:8000/Video2", "http://192.168.68.121:8000/Video4", "http://172.20.10.121:8000/Arm"]
    urlGpioCST = ["http://192.168.68.121:8000/gpio21", "http://192.168.68.121:8000/gpio20", "http://192.168.68.121:8000/gpio16", "http://172.20.10.121:8000/gpio12"]
    
    urlGpioArmStatus = ["http://192.168.68.121:8000/gpio06", "http://192.168.68.121:8000/gpio13", "http://192.168.68.121:8000/gpio19", "http://172.20.10.121:8000/gpio26"]
    urlGpioArmSignal = ["http://192.168.68.121:8000/gpio23", "http://192.168.68.121:8000/gpio24"]


img_path = "image.jpg"
img_path02 = "image02.jpg"
img_path03 = "image03.jpg"
img_path04 = "image04.jpg"

relay_on = bytearray(b"\xA0\x01\x01\xA2")
relay_off = bytearray(b"\xA0\x01\x00\xA1")


# target = ["CST01", "CST02", "CST03",
#           "CST0102-USC", "CST0102-CST01" , "CST0102-CST02",
#           "CST0103-USC", "CST0103-CST01" , "CST0103-CST03",
#           "CST0203-USC", "CST0203-CST02" , "CST0203-CST03",
#           "CST010203-USC", "CST010203-CST01", "CST010203-CST02", "CST010203-CST03"]

# images = {}

# for image_name in target:
#     image_path = f"C:/Users/a2265/Desktop/project/Dry Clean Auto/圖片/{image_name}.png"  # 替換成你的圖片路徑
#     try:
#         img = Image.open(image_path)
#         images[image_name] = img
#     except FileNotFoundError:
#         print(f"找不到圖片：{image_name}")

# =============================================================================
# 
# =============================================================================
paddleOCR = PaddleOCR(show_log = False, det = False, lang="en", use_angle_cls=True)

try:
    ser = serial.Serial(SERIAL_PORT, 9600, timeout = 0)
    ser.write(relay_off)
    # ser.close()
except:
    print("Serial Port 異常")

def captureImageFromVideo0():
    
    countSameAnswer = 0
    sameAnswerTotal = THRESHOLD
    lastCasID = ""
    
    while True:
        
        Index = box01.get()
        
        try: 
            if Index != "":
                raspberryIO = requests.get(urlGpioCST[int(Index)])

                if raspberryIO.status_code == 200:
                    
                    gpioRaw = raspberryIO.content
                    gpio_value = int(gpioRaw.decode('utf-8').split(":")[1].strip())
                    if gpio_value == 1:
                        response = requests.get(urlVideo[int(Index)])

                        if response.status_code == 200:

                            # =============================================================================
                            #  顯示圖片                           
                            # =============================================================================
                            # 讀取回應的內容
                            image_bytes = response.content
                    
                            # 將圖像數據轉換為 Image 對象
                            original_image = Image.open(BytesIO(image_bytes))
                            
                            resized_image = original_image
                            # resized_image = original_image.resize((320, 320))
                            
                            # 將 Image 對象轉換為 Tkinter 的 PhotoImage 對象
                            photo_image = ImageTk.PhotoImage(resized_image)
                            
                            # 在 Tkinter 窗口中顯示圖像
                            image01Label.config(image=photo_image)
                            image01Label.image = photo_image  # 保持對 PhotoImage 對象的引用
  
                            resized_image.save(img_path)
                                                        
                            # =============================================================================
                            # 辨識                         
                            # =============================================================================
                            detecteBarCode = decode(resized_image, symbols=[ZBarSymbol.CODE39])
                            
                            CassetteId = []

                            if detecteBarCode != []:

                                for barcode in detecteBarCode:
                                    print("11111")
                                    barcodeResult = barcode.data.decode('utf-8')
                                    CassetteId = barcodeResult
                            else:
                                print("22222")
                                paddleResult = paddleOCR.ocr(img_path, cls=False)

                                if paddleResult[0] != None:
                                    CassetteId = paddleResult[0][0][1][0]
                                
                            current_time = datetime.now().strftime("%Y%m%d%H%M")
    
                            if CassetteId != [] and CassetteId != "." and CassetteId != ".." and CassetteId != "..." and CassetteId != "...." and CassetteId != "....." and CassetteId != "......" and CassetteId[-1] != ":":

                                if lastCasID != "" and lastCasID == CassetteId:
                                    countSameAnswer += 1
                                else:
                                    countSameAnswer = 0
     
                                if countSameAnswer == sameAnswerTotal:

                                    resized_image.save("辨識結果/" + "Camera01_" + current_time + "_" + str(CassetteId) + ".jpg")
            
                                    cstid01Label.config(text = "CST ID: " + str(CassetteId))
    
                                    # =============================================================================
                                    # CST ID 轉 LOT ID
                                    # =============================================================================
                                    try:
                                        print("3-4")
                                        url = "http://l3cedaserver.corpnet.auo.com./L5Report/Array/LotInquery/lotinfo.asp?casetid=" + str(CassetteId) + "&lotid=&submit1=Query"

                                        response = requests.request("POST", url, proxies = {"http": "http://10.84.66.6:8080"})
                                        
                                        html = response.text
                                    
                                        soup = BeautifulSoup(html, "html.parser")
                                    
                                        strong_tag = soup.find('strong', text = "Lot ID")    
                                        
                                        if strong_tag:
       
                                            LotID = strong_tag.find_next('td').text
                                            LotID = LotID.strip()
                                            
                                            # =============================================================================
                                            # 讀取清洗清單
                                            # =============================================================================
                                            selected_items = Lstbox1.get(0, tk.END)
           
                                            # =============================================================================
                                            #   判斷模式                                  
                                            # =============================================================================
                                            
                                            ModeIsClean = False
                                            for cleanList in selected_items:
                                                if cleanList[1:3] == LotID[1:3]:
                                                    ModeIsClean = True
                                                    break
                                                
                                            if ModeIsClean == True:
                                                mode01Label.config(text = "MODE: 清洗模式 (非N+)")
                                            else:
                                                mode01Label.config(text = "MODE: 一般模式 (N+)")
                                                
                                        else:
                                            print("3-5")
                                            LotID = "搜尋不到"
                                            mode01Label.config(text = "MODE: Nan")
                                            resized_image.save("辨識結果/" + "Camera01_" + current_time + "_無法辨識.jpg")
                                    except:
                                        print("4")
                                        LotID = "網路斷線"
                                        mode01Label.config(text = "MODE: Nan")
                                            
                                    lotid01Label.config(text = "LOT ID: " + LotID)

                            else:
                                print("3-6")
                                cstid01Label.config(text = "CST ID: 無法辨識")
                                lotid01Label.config(text = "LOT ID: Nan")
                                mode01Label.config(text = "MODE: Nan")
                                
                                countSameAnswer = 0
                                
                            
                            os.remove(img_path)
                            
                            lastCasID = CassetteId
                            
                        else:
                            print("6")
                            print(f"無法獲取照片。狀態碼: {response.status_code}")
                            
                            cstid01Label.config(text = "CST ID: 無法獲取照片")
                            lotid01Label.config(text = "LOT ID: Nan")
                            mode01Label.config(text = "MODE: Nan")
                            image01Label.config(image=blank_image)
                            countSameAnswer = 0
                    else:
                        print("7")
                        cstid01Label.config(text = "CST ID: 沒有 Cassette")
                        lotid01Label.config(text = "LOT ID: Nan")
                        mode01Label.config(text = "MODE: Nan")
                        image01Label.config(image=blank_image)
                        countSameAnswer = 0
                else:
                    print("8")
                    print(f"無法獲取GPIO 21。狀態碼: {raspberryIO.status_code}")
                    
                    cstid01Label.config(text = "CST ID: Nan")
                    lotid01Label.config(text = "LOT ID: Nan")
                    mode01Label.config(text = "MODE: Nan")
                    countSameAnswer = 0
 
            time.sleep(DELAYTIME)
        except:
            print("99")
            image01Label.config(image=blank_image)
            cstid01Label.config(text = "CST ID: Nan")
            lotid01Label.config(text = "LOT ID: Nan")
            mode01Label.config(text = "MODE: Nan")
            countSameAnswer = 0

def captureImageFromVideo2():
    
    countSameAnswer = 0
    sameAnswerTotal = THRESHOLD
    lastCasID = ""
    
    while True:
        
        Index = box02.get()
        
        try: 
            if Index != "":
                raspberryIO = requests.get(urlGpioCST[int(Index)])
            
                if raspberryIO.status_code == 200:
                    
                    gpioRaw = raspberryIO.content
                    gpio_value = int(gpioRaw.decode('utf-8').split(":")[1].strip())
            
                    if gpio_value == 1:
                        response = requests.get(urlVideo[int(Index)])
                        
                        if response.status_code == 200:
                            
                            # 讀取回應的內容
                            image_bytes = response.content
                    
                            # 將圖像數據轉換為 Image 對象
                            original_image = Image.open(BytesIO(image_bytes))
                            
                            resized_image = original_image
                            
                            # resized_image = original_image.resize((320, 320))
                            
                            # 將 Image 對象轉換為 Tkinter 的 PhotoImage 對象
                            photo_image = ImageTk.PhotoImage(resized_image)
                            
                            # 在 Tkinter 窗口中顯示圖像
                            image02Label.config(image=photo_image)
                            image02Label.image = photo_image  # 保持對 PhotoImage 對象的引用
                            
                            resized_image.save(img_path)
                            
                            detecteBarCode = decode(resized_image, symbols=[ZBarSymbol.CODE39])
                            
                            CassetteId = []
                            
                            if detecteBarCode != []:
                                for barcode in detecteBarCode:
                                    barcodeResult = barcode.data.decode('utf-8')
                                    CassetteId = barcodeResult
                            else:
                                paddleResult = paddleOCR.ocr(img_path, cls=True)
                                if paddleResult[0] != None:
                                    CassetteId = paddleResult[0][0][1][0]
            
                           
                            
                            current_time = datetime.now().strftime("%Y%m%d%H%M")

                            if CassetteId != [] and len(CassetteId) == 6:
                                
                                if lastCasID != "" and lastCasID == CassetteId:
                                    countSameAnswer += 1
                                else:
                                    countSameAnswer = 0
     
                                if countSameAnswer == sameAnswerTotal:

                                    resized_image.save("辨識結果/" + "Camera02_" + current_time + "_" + str(CassetteId) + ".jpg")
            
                                    cstid02Label.config(text = "CST ID: " + str(CassetteId))
    
                                    # =============================================================================
                                    # CST ID 轉 LOT ID
                                    # =============================================================================
                                    
                                    try:
                                        
                                        url = "http://l3cedaserver.corpnet.auo.com./L5Report/Array/LotInquery/lotinfo.asp?casetid=" + str(CassetteId) + "&lotid=&submit1=Query"

                                        response = requests.request("POST", url, proxies = {"http": "http://10.84.66.6:8080"})
                                        
                                        html = response.text
                                    
                                        soup = BeautifulSoup(html, "html.parser")
                                    
                                        strong_tag = soup.find('strong', text = "Lot ID")    
                                        
                                        if strong_tag:
                                            LotID = strong_tag.find_next('td').text
                                            LotID = LotID.strip()
                                            
                                            # =============================================================================
                                            # 讀取清洗清單
                                            # =============================================================================
                                            selected_items = Lstbox1.get(0, tk.END)
           
                                            # =============================================================================
                                            #   判斷模式                                  
                                            # =============================================================================
                                            ModeIsClean = False
                                            for cleanList in selected_items:
                                                if cleanList[1:3] == CassetteId[1:3]:
                                                    ModeIsClean = True
                                                    break
                                                
                                            if ModeIsClean == True:
                                                mode02Label.config(text = "MODE: 清洗模式 (非N+)")
                                            else:
                                                mode02Label.config(text = "MODE: 一般模式 (N+)")
                                                
                                        else:
                                            LotID = "搜尋不到"
                                            mode02Label.config(text = "MODE: Nan")
                                            resized_image.save("辨識結果/" + "Camera02_" + current_time + "_無法辨識.jpg")
                                    except:
                                        LotID = "網址有錯"
                                        mode02Label.config(text = "MODE: Nan")
                                            
                                    lotid02Label.config(text = "LOT ID: " + LotID)

                            else:
                                cstid02Label.config(text = "CST ID: 無法辨識")
                                lotid02Label.config(text = "LOT ID: Nan")
                                mode02Label.config(text = "MODE: Nan")
                                
                                countSameAnswer = 0
                                
                            
                            os.remove(img_path)
                            
                            lastCasID = CassetteId
                            
                        else:
                            print(f"無法獲取照片。狀態碼: {response.status_code}")
                            
                            cstid02Label.config(text = "CST ID: 無法獲取照片")
                            lotid02Label.config(text = "LOT ID: Nan")
                            mode02Label.config(text = "MODE: Nan")
                            image02Label.config(image=blank_image)
                    else:
                        cstid02Label.config(text = "CST ID: 沒有 Cassette")
                        lotid02Label.config(text = "LOT ID: Nan")
                        mode02Label.config(text = "MODE: Nan")
                        image02Label.config(image=blank_image)
                else:
                    print(f"無法獲取GPIO 21。狀態碼: {raspberryIO.status_code}")
                    
                    cstid02Label.config(text = "CST ID: Nan")
                    lotid02Label.config(text = "LOT ID: Nan")
                    mode02Label.config(text = "MODE: Nan")
 
            time.sleep(DELAYTIME)
        except:
            pass


def captureImageFromVideo4():
    while True:
        
        Index = box03.get()
        
        try: 
            if Index != "":
                raspberryIO = requests.get(urlGpioCST[int(Index)])
            
                if raspberryIO.status_code == 200:
                    
                    gpioRaw = raspberryIO.content
                    gpio_value = int(gpioRaw.decode('utf-8').split(":")[1].strip())
            
                    if gpio_value == 1:
                        response = requests.get(urlVideo[int(Index)])
                        
                        if response.status_code == 200:
                            
                            # 讀取回應的內容
                            image_bytes = response.content
                    
                            # 將圖像數據轉換為 Image 對象
                            original_image = Image.open(BytesIO(image_bytes))
                            
                            resized_image = original_image
                            
                            # resized_image = original_image.resize((320, 320))
                            
                            # 將 Image 對象轉換為 Tkinter 的 PhotoImage 對象
                            photo_image = ImageTk.PhotoImage(resized_image)
                            
                            # 在 Tkinter 窗口中顯示圖像
                            image03Label.config(image=photo_image)
                            image03Label.image = photo_image  # 保持對 PhotoImage 對象的引用
                            
                            
                            
                            resized_image.save(img_path)
                            
                            detecteBarCode = decode(resized_image, symbols=[ZBarSymbol.CODE39])
                            
                            CassetteId = []
                            
                            if detecteBarCode != []:
                                for barcode in detecteBarCode:
                                    barcodeResult = barcode.data.decode('utf-8')
                                    CassetteId = barcodeResult
                            else:
                                paddleResult = paddleOCR.ocr(img_path, cls=True)
                                if paddleResult[0] != None:
                                    CassetteId = paddleResult[0][0][1][0]
            
                            
                            
                            current_time = datetime.now().strftime("%Y%m%d%H%M")
                            
                            if CassetteId != []:
                                resized_image.save("辨識結果/" + "Camera03_" + current_time + "_" + str(CassetteId) + ".jpg")
        
                                cstid03Label.config(text = "CST ID: " + str(CassetteId))

                                if len(CassetteId) == 6:
                                    # =============================================================================
                                    # CST ID 轉 LOT ID
                                    # =============================================================================
                                    
                                    try:
                                        url = "http://l3cedaserver.corpnet.auo.com./L5Report/Array/LotInquery/lotinfo.asp?casetid=" + str(CassetteId) + "&lotid=&submit1=Query"

                                        response = requests.request("POST", url, proxies = {"http": "http://10.84.66.6:8080"})
                                        
                                        html = response.text
                                    
                                        soup = BeautifulSoup(html, "html.parser")
                                    
                                        strong_tag = soup.find('strong', text = "Lot ID")    
                                        
                                        if strong_tag:
                                            LotID = strong_tag.find_next('td').text
                                            LotID = LotID.strip()
                                            
                                            # =============================================================================
                                            # 讀取清洗清單
                                            # =============================================================================
                                            selected_items = Lstbox1.get(0, tk.END)
           
                                            # =============================================================================
                                            #   判斷模式                                  
                                            # =============================================================================
                                            ModeIsClean = False
                                            for cleanList in selected_items:
                                                if cleanList[1:3] == CassetteId[1:3]:
                                                    ModeIsClean = True
                                                    break
                                                
                                            if ModeIsClean == True:
                                                mode03Label.config(text = "MODE: 清洗模式 (非N+)")
                                            else:
                                                mode03Label.config(text = "MODE: 一般模式 (N+)")
                                                
                                        else:
                                            LotID = "搜尋不到"
                                            mode03Label.config(text = "MODE: Nan")
                                    except:
                                        LotID = "網址有錯"
                                        mode03Label.config(text = "MODE: Nan")
                                            
                                    lotid03Label.config(text = "LOT ID: " + LotID)
                                   
                                        
                                else:
                                    lotid03Label.config(text = "LOT ID: 不足6個字元")
                                    mode03Label.config(text = "MODE: Nan")
                                    
                            else:
                                resized_image.save("辨識結果/" + "Camera03_" + current_time + "_無法辨識.jpg")
        
                                cstid03Label.config(text = "CST ID: 無法辨識")
                                lotid03Label.config(text = "LOT ID: Nan")
                                mode03Label.config(text = "MODE: Nan")
                            
                            os.remove(img_path)
                            
                        else:
                            print(f"無法獲取照片。狀態碼: {response.status_code}")
                            
                            cstid03Label.config(text = "CST ID: 無法獲取照片")
                            lotid03Label.config(text = "LOT ID: Nan")
                            mode03Label.config(text = "MODE: Nan")
                            image03Label.config(image=blank_image)
                    else:
                        cstid03Label.config(text = "CST ID: 沒有 Cassette")
                        lotid03Label.config(text = "LOT ID: Nan")
                        mode03Label.config(text = "MODE: Nan")
                        image03Label.config(image=blank_image)
                else:
                    print(f"無法獲取GPIO 21。狀態碼: {raspberryIO.status_code}")
                    
                    cstid03Label.config(text = "CST ID: Nan")
                    lotid03Label.config(text = "LOT ID: Nan")
                    mode03Label.config(text = "MODE: Nan")
 
            time.sleep(DELAYTIME)
        except:
            pass
        
        
def armStatus():
    
    last_reading_time = time.time()
    
    while True:
        
        port01API = requests.get(urlGpioArmStatus[0])
        port02API = requests.get(urlGpioArmStatus[1])
        port03API = requests.get(urlGpioArmStatus[2])
        uscAPI = requests.get(urlGpioArmStatus[3])
        
        if port01API.status_code == 200 and port02API.status_code == 200 and port03API.status_code == 200 and uscAPI.status_code == 200:
            port01gpioRaw = port01API.content
            port01gpioDecode = int(port01gpioRaw.decode('utf-8').split(":")[1].strip())
            
            port02gpioRaw = port02API.content
            port02gpioDecode = int(port02gpioRaw.decode('utf-8').split(":")[1].strip())
            
            port03gpioRaw = port03API.content
            port03gpioDecode = int(port03gpioRaw.decode('utf-8').split(":")[1].strip())
            
            uscgpioRaw = uscAPI.content
            uscgpioDecode = int(uscgpioRaw.decode('utf-8').split(":")[1].strip())
            
            
                
            if port01gpioDecode == 1:
                last_reading_time = time.time()
                text = mode01Label.cget("text")
                resultIndexLabel.config(text = "Port01: ")
                resultLabel.config(text = text)
                
            elif port02gpioDecode == 1:
                last_reading_time = time.time()
                text = mode02Label.cget("text")
                resultIndexLabel.config(text = "Port02: ")
                resultLabel.config(text = text)
                
            elif port03gpioDecode == 1:
                last_reading_time = time.time()
                text = mode03Label.cget("text")
                resultIndexLabel.config(text = "Port03: ")
                resultLabel.config(text = text)
                
            elif uscgpioDecode == 1:
                last_reading_time = time.time()
                text = resultLabel.cget("text")
                
                try:
                    if text == "MODE: 清洗模式 (非N+)":
                        if toggle_button.config('text')[-1] == '【關閉】PLC功能':
                            ser.write(relay_off)
                        print("MODE: 清洗模式 (非N+)")
                        
                    elif text == "MODE: 一般模式 (N+)":
                        if toggle_button.config('text')[-1] == '【關閉】PLC功能':
                            ser.write(relay_on)
                        print("MODE: 一般模式 (N+)")
                        
                    elif text == "MODE: Nan":
                        if toggle_button.config('text')[-1] == '【關閉】PLC功能':
                            ser.write(relay_off)
                        print("MODE: Nan")

                except:
                    print("Serial Port 異常")
            else:
                current_time = time.time()
                
                if current_time - last_reading_time >= timeInterval:
                    
                    resultIndexLabel.config(text = "Result: ")
                    resultLabel.config(text = "Nan")
        
        time.sleep(0.2)

def ini():
    Lstbox1.delete(0, tk.END)
    with open('清洗清單.csv', newline='', encoding='utf-8') as csvfile:
        reader = csv.reader(csvfile)
        for row in reader:
            Lstbox1.insert(tk.END, row[0])

def ins():
    if entry.get() != '':
        if Lstbox1.curselection() == ():
            Lstbox1.insert(tk.END, entry.get())
        else:
            Lstbox1.insert(Lstbox1.curselection(), entry.get())

def delt():
    if Lstbox1.curselection() != ():
        Lstbox1.delete(Lstbox1.curselection())


# =============================================================================
# 
# =============================================================================
def Simpletoggle():
    result = messagebox.askyesno("確認", "確定要切換嗎？")
    
    try:
        # ser = serial.Serial(SERIAL_PORT, 9600, timeout = 0)
        
        if result:
            
            if toggle_button.config('text')[-1] == '【開啟】PLC功能':
                toggle_button.config(text='【關閉】PLC功能')
                # ser.write(relay_on)
                # ser.close()
                
            else:
                toggle_button.config(text='【開啟】PLC功能')
                # ser.write(relay_off)
                # ser.close()
    except:
        print("Serial Port 異常")
        
        

def ManualSimpletoggle():
    result = messagebox.askyesno("確認", "確定要切換嗎？")
    
    try:
        # ser = serial.Serial(SERIAL_PORT, 9600, timeout = 0)
        
        if result:
            
            if Manual_toggle_button.config('text')[-1] == '手動開啟':
                Manual_toggle_button.config(text='手動關閉')
                ser.write(relay_on)
                # ser.close()
                
            else:
                Manual_toggle_button.config(text='手動開啟')
                ser.write(relay_off)
                # ser.close()
    except:
        print("Serial Port 異常")


      
window = tk.Tk()
window.title('GUI')
window.geometry('1440x760+0+0')
window.configure(bg='#111111')
window.resizable(False, False)

blank_image = tk.PhotoImage(width=1, height=1)


# 設置列和行權重
for i in range(4):
    window.columnconfigure(i, weight=4)

window.rowconfigure(0, weight=5)
for i in range(1, 6):
    window.rowconfigure(i, weight=1)

# =============================================================================
# 創建框架
# =============================================================================
frameCleanList = tk.Frame(window, relief=tk.GROOVE, bg='#333333')
frameModifyCleanList = tk.Frame(window, relief=tk.RAISED, bg='#333333')
frameGPIO = tk.Frame(window, relief=tk.RAISED, bg='#333333')
framePredict = tk.Frame(window, relief=tk.RAISED, bg='#333333')
frameResult = tk.Frame(window, relief=tk.RAISED, bg='#333333')

image01Label = tk.Label(window, bg='#333333')
image02Label = tk.Label(window, bg='#333333')
image03Label = tk.Label(window, bg='#333333')
image04Label = tk.Label(window, bg='#333333')

cstid01Label = tk.Label(window, bg='#333333', fg='white', font=('Arial', 16, 'bold'), text='CST ID: Nan')
cstid02Label = tk.Label(window, bg='#333333', fg='white', font=('Arial', 16, 'bold'), text='CST ID: Nan')
cstid03Label = tk.Label(window, bg='#333333', fg='white', font=('Arial', 16, 'bold'), text='CST ID: Nan')

resultLabel = tk.Label(frameResult, bg='#333333', fg='white', font=('Arial', 16, 'bold'), text='Nan')
resultIndexLabel = tk.Label(frameResult, bg='#333333', fg='white', font=('Arial', 16, 'bold'), text='Result: ')

lotid01Label = tk.Label(window, bg='#333333', fg='white', font=('Arial', 16, 'bold'), text='LOT ID: Nan')
lotid02Label = tk.Label(window, bg='#333333', fg='white', font=('Arial', 16, 'bold'), text='LOT ID: Nan')
lotid03Label = tk.Label(window, bg='#333333', fg='white', font=('Arial', 16, 'bold'), text='LOT ID: Nan')

mode01Label = tk.Label(window, bg='#333333', fg='white', font=('Arial', 16, 'bold'), text='MODE: Nan')
mode02Label = tk.Label(window, bg='#333333', fg='white', font=('Arial', 16, 'bold'), text='MODE: Nan')
mode03Label = tk.Label(window, bg='#333333', fg='white', font=('Arial', 16, 'bold'), text='MODE: Nan')

toggle_button = tk.Button(frameModifyCleanList, text = "【開啟】PLC功能", command = Simpletoggle, 
                          font = ('Arial', 16, 'bold'), bg = '#555555', fg = 'white')

Manual_toggle_button = tk.Button(frameModifyCleanList, text = "手動開啟", command = ManualSimpletoggle, 
                          font = ('Arial', 16, 'bold'), bg = '#555555', fg = 'white')


NanLabel01 = tk.Label(window, bg='#333333', fg='white', font=('Arial', 16, 'bold'), text='')
NanLabel02 = tk.Label(window, bg='#333333', fg='white', font=('Arial', 16, 'bold'), text='')


Lstbox1 = tk.Listbox(frameCleanList, bg='#333333', fg='white', font=('Arial', 16), selectbackground='#999999')
entry = tk.Entry(frameModifyCleanList, font=('Arial', 17), bg='#333333', fg='white')
initButton = tk.Button(frameModifyCleanList, text='初始化', command=ini, font=('Arial', 16, 'bold'), bg='#555555', fg='white')
insertButton = tk.Button(frameModifyCleanList, text='新增', command=ins, font=('Arial', 16, 'bold'), bg='#555555', fg='white')
delButton = tk.Button(frameModifyCleanList, text='刪除', command=delt, font=('Arial', 16, 'bold'), bg='#555555', fg='white')

box01 = tk.ttk.Combobox(window, values=["0", "1", "2", "3", "Null"], font = ('Arial', 16, 'bold'))
box02 = tk.ttk.Combobox(window, values=["0", "1", "2", "3", "Null"], font = ('Arial', 16, 'bold'))
box03 = tk.ttk.Combobox(window, values=["0", "1", "2", "3", "Null"], font = ('Arial', 16, 'bold'))
box04 = tk.ttk.Combobox(window, values=["0", "1", "2", "3", "Null"], font = ('Arial', 16, 'bold'))

# =============================================================================
# 使用網格設置布局
# =============================================================================
frameCleanList.grid(row=4, column=0, padx=1, pady=1, sticky='nsew')




image01Label.grid(row=0, column=0, padx=1, pady=1, sticky='nsew')
image02Label.grid(row=0, column=1, padx=1, pady=1, sticky='nsew')
image03Label.grid(row=0, column=2, padx=1, pady=1, sticky='nsew')
image04Label.grid(row=0, column=3, padx=1, pady=1, sticky='nsew')

box01.grid(row=5, column=0, padx=1, pady=1, sticky='nsew')
box02.grid(row=5, column=1, padx=1, pady=1, sticky='nsew')
box03.grid(row=5, column=2, padx=1, pady=1, sticky='nsew')
box04.grid(row=5, column=3, padx=1, pady=1, sticky='nsew')


cstid01Label.grid(row=1, column=0, padx=1, pady=1, sticky='nsew')
cstid02Label.grid(row=1, column=1, padx=1, pady=1, sticky='nsew')
cstid03Label.grid(row=1, column=2, padx=1, pady=1, sticky='nsew')

frameResult.grid(row=1, column=3, padx=1, pady=1, sticky='nsew')
resultIndexLabel.pack(side = "left")
resultLabel.pack(side = "left")
# resultIndexLabel.grid(row=0, column=0, padx=1, pady=1, sticky='we')
# resultLabel.grid(row=0, column=1, padx=1, pady=1, sticky='we')

lotid01Label.grid(row=2, column=0, padx=1, pady=1, sticky='nsew')
lotid02Label.grid(row=2, column=1, padx=1, pady=1, sticky='nsew')
lotid03Label.grid(row=2, column=2, padx=1, pady=1, sticky='nsew')

mode01Label.grid(row=3, column=0, padx=1, pady=1, sticky='nsew')
mode02Label.grid(row=3, column=1, padx=1, pady=1, sticky='nsew')
mode03Label.grid(row=3, column=2, padx=1, pady=1, sticky='nsew')

toggle_button.grid(row=4, column=0, padx=1, pady=1, sticky='nsew')
Manual_toggle_button.grid(row=5, column=0, padx=1, pady=1, sticky='nsew')

NanLabel01.grid(row=2, column=3, padx=1, pady=1, sticky='nsew')
NanLabel02.grid(row=3, column=3, padx=1, pady=1, sticky='nsew')


frameModifyCleanList.grid(row=4, column=1, padx=1, pady=1, sticky='nsew')
Lstbox1.grid(row=0, column=0, padx=1, pady=1, sticky='nsew')
entry.grid(row=0, column=0, padx=1, pady=5, sticky='nsew')
initButton.grid(row=1, column=0, padx=1, pady=5, sticky='nsew')
insertButton.grid(row=2, column=0, padx=1, pady=5, sticky='nsew')
delButton.grid(row=3, column=0, padx=1, pady=5, sticky='nsew')


frameGPIO.grid(row=4, column=2, padx=1, pady=1, sticky='nsew')

framePredict.grid(row=4, column=3, padx=1, pady=1, sticky='nsew')



# =============================================================================
# 主循環
# =============================================================================

runVideo0 = threading.Thread(target = captureImageFromVideo0)
runVideo2 = threading.Thread(target = captureImageFromVideo2)
runVideo4 = threading.Thread(target = captureImageFromVideo4)
runArm = threading.Thread(target = armStatus)


runVideo0.start()
runVideo2.start()
runVideo4.start()
runArm.start()

window.mainloop()
